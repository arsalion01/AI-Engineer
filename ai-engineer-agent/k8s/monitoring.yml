# AI Engineer Agent - Monitoring Stack
# Prometheus and Grafana for system observability

# Prometheus Configuration
apiVersion: v1
kind: PersistentVolume
metadata:
  name: prometheus-pv
  labels:
    app: ai-engineer-agent
    component: monitoring
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: fast-ssd
  hostPath:
    path: /data/prometheus

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  labels:
    app: ai-engineer-agent
    component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  labels:
    app: ai-engineer-agent
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'ai-engineer-k8s'
        environment: 'production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    scrape_configs:
      # Application Metrics
      - job_name: 'ai-engineer-app'
        static_configs:
          - targets: ['ai-engineer-service:80']
        metrics_path: '/metrics'
        scrape_interval: 30s
        scrape_timeout: 10s

      # Database Metrics
      - job_name: 'postgresql'
        static_configs:
          - targets: ['postgresql:5432']
        metrics_path: '/metrics'
        scrape_interval: 30s

      - job_name: 'timescaledb'
        static_configs:
          - targets: ['timescaledb:5432']
        metrics_path: '/metrics'
        scrape_interval: 30s

      # Cache Metrics
      - job_name: 'redis'
        static_configs:
          - targets: ['redis:6379']
        metrics_path: '/metrics'
        scrape_interval: 15s

      # Kubernetes Metrics
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - source_labels: [__address__]
          regex: '(.*):10250'
          replacement: '${1}:9100'
          target_label: __address__

      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  labels:
    app: ai-engineer-agent
    component: monitoring
data:
  app-rules.yml: |
    groups:
      - name: ai-engineer-app
        rules:
        - alert: HighErrorRate
          expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: High error rate detected
            description: "Error rate is {{ $value }} req/sec"

        - alert: HighResponseTime
          expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: High response time detected
            description: "95th percentile response time is {{ $value }}s"

        - alert: DatabaseConnectionsHigh
          expr: pg_stat_activity_count > 80
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: High database connections
            description: "Database has {{ $value }} active connections"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app: ai-engineer-agent
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-engineer-agent
      component: monitoring
  template:
    metadata:
      labels:
        app: ai-engineer-agent
        component: monitoring
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=30d'
        - '--web.enable-lifecycle'
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: prometheus-storage
          mountPath: /prometheus
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-pvc
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-rules
        configMap:
          name: prometheus-rules

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  labels:
    app: ai-engineer-agent
    component: monitoring
spec:
  selector:
    app: ai-engineer-agent
    component: monitoring
  ports:
  - port: 9090
    targetPort: 9090
  type: ClusterIP

---
# Grafana Configuration
apiVersion: v1
kind: PersistentVolume
metadata:
  name: grafana-pv
  labels:
    app: ai-engineer-agent
    component: visualization
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: fast-ssd
  hostPath:
    path: /data/grafana

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  labels:
    app: ai-engineer-agent
    component: visualization
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  labels:
    app: ai-engineer-agent
    component: visualization
data:
  datasources.yaml: |
    apiVersion: 1
    
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true
        
      - name: PostgreSQL
        type: postgres
        url: postgresql:5432
        database: ai_engineer_db
        user: ai_engineer_user
        password: secure-database-password-change-in-production
        sslmode: disable
        
      - name: TimescaleDB
        type: postgres
        url: timescaledb:5432
        database: ai_engineer_analytics
        user: ai_engineer_analytics_user
        password: secure-analytics-password-change-in-production
        sslmode: disable
        jsonData:
          timescaledb: true

---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  labels:
    app: ai-engineer-agent
    component: visualization
type: Opaque
stringData:
  admin-user: "admin"
  admin-password: "secure-admin-password-change-in-production"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: ai-engineer-agent
    component: visualization
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-engineer-agent
      component: visualization
  template:
    metadata:
      labels:
        app: ai-engineer-agent
        component: visualization
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-datasources
        configMap:
          name: grafana-datasources

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  labels:
    app: ai-engineer-agent
    component: visualization
spec:
  selector:
    app: ai-engineer-agent
    component: visualization
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# Monitoring Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-ingress
  labels:
    app: ai-engineer-agent
    component: monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-basic-auth
spec:
  tls:
  - hosts:
    - monitoring.ai-engineer-agent.com
    secretName: monitoring-tls
  rules:
  - host: monitoring.ai-engineer-agent.com
    http:
      paths:
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus
            port:
              number: 9090